{
     "block" :   {
          "defaults" :   {
            "properties.datasources" :   "[\"PSINagra:2020:data\"]",
            "properties.sourcetdb" :    "{\"26\" :   \"PSI_NAGRA20\"}",
               "properties.reactyp" :   "{\"2\" :   \"RE_DISSOLUTION\"}",
               "properties.TPMethods" :   "[{\"method\":{\"0\" :   \"logk_fpt_function\"}, \"logk_ft_coeffs\": { \"names\" : [\"A1\",\"A2\",\"A3\",\"A4\",\"A5\"] } },
                                            {\"method\":{\"12\" :   \"dr_volume_fpt\"}, \"dr_volume_fpt_coeffs\": { } }]",
               "properties.level" :   "0"
          },
          "pairs" :   {
               "analytical" :   {
                    "datatype" :   "string",
                    "organization" :   "list"
               },
               "analytic" :   {
                    "datatype" :   "string",
                    "organization" :   "list"
               },
               "analytical_expression" :   {
                    "datatype" :   "string",
                    "organization" :   "list"
               }
          },
          "matches" :   {
               "head0" :   {
                    "field" :   "properties.symbol",
                    "ignore" :   false,
                    "script" :   "",
                    "convert" :   {

                    }
               },
               "head1" :   {
                    "field" :   "properties.equation",
                    "ignore" :   false,
                    "script" :   "",
                    "convert" :   {

                    }
               },
               "head2" :   {
                    "field" :   "properties.name",
                    "ignore" :   false,
                    "script" :   "",
                    "convert" :   {

                    }
               },
               "analytic" :   {
                    "field" :   "properties.TPMethods.0.logk_ft_coeffs.values",
                    "ignore" :   false,
                    "script" :   "if field ~= nil then if field[4] ~=0.0 then field[4]= field[4]/math.log(10) end end",
                    "convert" :   {

                    }
               },
               "analytical_expression" :   {
                    "field" :   "properties.TPMethods.0.logk_ft_coeffs.values",
                    "ignore" :   false,
                    "script" :   "if field ~= nil then if field[4] ~=0.0 then field[4]= field[4]/math.log(10) end end",
                    "convert" :   {

                    }
               },
               "log_K" :   {
                    "field" :   "properties.logKr.values",
                    "ignore" :   false,
                    "script" :   "",
                    "convert" :   {

                    }
               },
               "log_k" :   {
                    "field" :   "properties.logKr.values",
                    "ignore" :   false,
                    "script" :   "",
                    "convert" :   {

                    }
               },
               "Vm" :   {
                    "field" :   "properties.TPMethods.1.dr_volume_fpt_coeffs.values",
                    "ignore" :   false,
                    "script" :   "",
                    "convert" : {

                    }
               },
                "delta_h" :   {
                         "field" :   "properties.drsm_enthalpy.values",
                         "ignore" :   false,
                         "script" :   "field[1] = field[1]*1000",
                         "convert" :   {

                         }
               }
          },
  "script" :   "rintable.properties.symbol = string.match(rintable.properties.symbol, \'%s*([^%s]*)\');\nrintable.properties.name = string.match(rintable.properties.name, \'%s*([^%s]*)\');\n frm = rintable.properties.equation;\n  frm = string.gsub(frm, \'%+%+\',  \'+2\' );\n frm = string.gsub(frm, \'%-%-\',  \'-2\' );\n frm = string.gsub(frm, \'%s+([%d%.]*)%s+(%w)\',  \' %1%2\' );\n frm = string.gsub(frm, \'%s+%+%s+\',  \'  \' );\n frm = string.gsub(frm, \'%s+%-%s+\',  \'  -\' ); \n frm = string.gsub( frm, '([^[%s=]]*)%s+([^[%s=]]*)', '%1  +  %2' );\n 
frm = string.gsub(frm, \'Acetate\', \'Ace\')
frm = string.gsub(frm, \'Adipate\', \'Adi\')
frm = string.gsub(frm, \'Malonate\', \'Mal\')
frm = string.gsub(frm, \'Nta\', \'Nta\')
frm = string.gsub(frm, \'Ox\', \'Oxa\')
frm = string.gsub(frm, \'Phthalat\', \'Pht\')
frm = string.gsub(frm, \'Pyrophos\', \'Pyr\')
-- frm = string.gsub(frm, \'Scn\', \'Scn\')
frm = string.gsub(frm, \'Suberate\', \'Sub\')
frm = string.gsub(frm, \'Succinat\', \'Suc\')
frm = string.gsub(frm, \'Edta\', \'Edt\')
rintable.properties.equation = frm; \n
               if rintable.properties.TPMethods[2].dr_volume_fpt_coeffs.values == nil then rintable.properties.TPMethods[2] = nil end;   "
     },
     "format" :   {
          "head_regexp" :   "\\s*([^\\s]+)\\s*;*\\s*(([\\w\\t \\+\\-\\(\\):\\.]+)\\s*=\\s*([^;\\n]+))[\\n;]{1}",
          "end_regexp" :   "",
          "key_regexp" :   "\\s*;*\\s*\\-{0,1}([a-zA-Z]\\w*)\\s*",
          "value_regexp" :   "\\s*([^#\\n;]*)",
          "value_next" :   "",
          "value_token_regexp" :   "\\s+",
          "comment_regexp" :   "#([^\\n]*)\\n*",
          "Ndata" :   0
     },
     "renderer" :   " ",
     "label" :   "VertexReaction",
     "separators" :   {
          "v_sep" :   "",
          "l_sep" :   "",
          "r_sep" :   "",
          "c_head" :   "",
          "c_end" :   "",
          "eod" :   "",
          "encoding" :   "",
          "str_delim" :   "",
          "bod" :   ""
     },
     "comment" :   "",
     "fname" :   "",
     "Nblocks" :   0,
     "Nlines" :   0
}
