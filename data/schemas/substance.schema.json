{
  "name": "substance",
  "doc": "Apache Thrift IDL definition for the substance service interface\n",
  "namespaces": {
    "*": "substance"
  },
  "includes": [
"prop",
"element"
  ],
  "enums": [
    {
      "name": "MethodGenEoS",
      "doc": "Codes for general\/EoS methods of calculation of DC thermodynamic parameters from GEMS3 v_mod.h\n",
      "members": [
        {
          "name": "CTPM_CPT",
          "value": 100,
          "doc": "Integration of empirical heat capacity equation Cp=f(T); DComp and ReacDC\n"
        },
        {
          "name": "CTPM_HKF",
          "value": 101,
          "doc": "Helgeson-Kirkham-Flowers (HKF) equation of state for aqueous species\n"
        },
        {
          "name": "CTPM_REA",
          "value": 102,
          "doc": "calculation of logK of reactions as they depend functionally on T and P; ReacDC\n"
        },
        {
          "name": "CTPM_EOS",
          "value": 103,
          "doc": "calculations via general equations of state (reserved)\n"
        },
        {
          "name": "CTPM_ISO",
          "value": 104,
          "doc": "calculation of parameters for isotopic forms of compounds (Grichuk, 1988); ReacDC\n"
        },
        {
          "name": "CTPM_SOR",
          "value": 105,
          "doc": "calculations via adsorption or ion exchange constants, using LFER correlations; ReacDC (reserved)\n"
        },
        {
          "name": "CEM_OFF",
          "value": 106,
          "doc": "no fluid model routine\n"
        },
        {
          "name": "CEM_GAS",
          "value": 107,
          "doc": "generic fluid model routine\n"
        },
        {
          "name": "CEM_H2O",
          "value": 108,
          "doc": "subroutine for H2O fluid\n"
        },
        {
          "name": "CEM_CO2",
          "value": 109,
          "doc": "subroutine for CO2 fluid\n"
        },
        {
          "name": "CEM_CH4",
          "value": 110,
          "doc": "subroutine for CH4 fluid\n"
        },
        {
          "name": "CEM_N2",
          "value": 111,
          "doc": "subroutine for N2 fluid\n"
        },
        {
          "name": "CEM_H2",
          "value": 112,
          "doc": "subroutine for H2 fluid\n"
        },
        {
          "name": "CEM_O2",
          "value": 113,
          "doc": "subroutine for O2 fluid\n"
        },
        {
          "name": "CEM_AR",
          "value": 114,
          "doc": "subroutine for Ar fluid\n"
        },
        {
          "name": "CEM_PO",
          "value": 115,
          "doc": "subroutine for polar fluids\n"
        },
        {
          "name": "CEM_NP",
          "value": 116,
          "doc": "subroutine for nonpolar fluids\n"
        },
        {
          "name": "CTPM_WJNR",
          "value": 117,
          "doc": "Water dielectric properites usin Jhonson and Norton (1991) model as implemented in Reaktoro\n"
        },
        {
          "name": "CTPM_WJNG",
          "value": 118,
          "doc": "Water dielectric properites using Jhonson and Norton (1991) model as implemented in GEMS\n"
        },
        {
          "name": "CTPM_HKFR",
          "value": 119,
          "doc": "Helgeson-Kirkham-Flowers EOS for aqueous species as implemented in Reaktoro\n"
        },
        {
          "name": "CTPM_WSV14",
          "value": 120,
          "doc": "Water electro-chemical properties using Sverjensky et al. (2014) dielectric constant model\n"
        },
        {
          "name": "CTPM_WF97",
          "value": 121,
          "doc": "Water electro-chemical properties using the Fernandez et al. (1997) dielectric constant model\n"
        }
      ]
    },
    {
      "name": "MethodCorrT",
      "doc": "Codes for temperature corrections of thermodynamic properties from GEMS\n",
      "members": [
        {
          "name": "CTM_CST",
          "value": 200,
          "doc": "calculation of ordinary integral using 11-term Cp=f(T) equations (up to 3 phase transitions)\n"
        },
        {
          "name": "CTM_CHP",
          "value": 201,
          "doc": "modifications for Landau phase transitions (Holland and Powell, 1998)\n"
        },
        {
          "name": "CTM_BER",
          "value": 202,
          "doc": "modifications for Landau phase transitions (Berman, 1988) (reserved)\n"
        },
        {
          "name": "CTM_FEI",
          "value": 203,
          "doc": "Cp=f(T) equation by Fei and Saxena (1986) (reserved)\n"
        },
        {
          "name": "CTM_LGX",
          "value": 204,
          "doc": "calculation of reaction properties from empirical from 5-term Cp(T); ReacDC\n"
        },
        {
          "name": "CTM_HKF",
          "value": 205,
          "doc": "calculation with HKF EOS (for aqueous species) as in SUPCRT92\n"
        },
        {
          "name": "CTM_WAT",
          "value": 206,
          "doc": "calculation of H2O water(steam) properties from HGK and LVS equations of state\n"
        },
        {
          "name": "CTM_WAS",
          "value": 207,
          "doc": "calculation of H2O water (steam) properties from IAPWS-95 equation of state (reserved)\n"
        },
        {
          "name": "CTM_LGK",
          "value": 208,
          "doc": "calculation from empirical function logK=f(T) (Nordstrom and Munoz, 1988); ReacDC only\n"
        },
        {
          "name": "CTM_EK0",
          "value": 209,
          "doc": "one-term extrapolation assuming dHr=0 and logK=const; ReacDC\n"
        },
        {
          "name": "CTM_EK1",
          "value": 210,
          "doc": "one-term extrapolation assuming dGr=const (Gu et al., 1994); ReacDC\n"
        },
        {
          "name": "CTM_EK2",
          "value": 211,
          "doc": "two-term extrapolation; ReacDC only\n"
        },
        {
          "name": "CTM_EK3",
          "value": 212,
          "doc": "three-term extrapolation assuming dCpr=const; ReacDC\n"
        },
        {
          "name": "CTM_IKZ",
          "value": 213,
          "doc": "Lagrange polynomial interpolation over logK(TP) array; ReacDC\n"
        },
        {
          "name": "CTM_DKR",
          "value": 214,
          "doc": "calculation of logK=f(T,P) from density equation (Marshall and Franck, 1978); ReacDC\n"
        },
        {
          "name": "CTM_PPE",
          "value": 215,
          "doc": "prediction of properties of aqueous hydroxides using Pronsprep-OH (Shock et al. 1997)\n"
        },
        {
          "name": "CTM_MRB",
          "value": 216,
          "doc": "calculation of logK=f(T,P) with modified Ryzhenko-Bryzgalin model\n"
        },
        {
          "name": "CTM_CPG",
          "value": 217,
          "doc": "reserved (FGL)\n"
        },
        {
          "name": "CTM_IFG",
          "value": 218,
          "doc": "calculation of parameters for isotopic forms of compounds (Grichuk, 1988); ReacDC\n"
        },
        {
          "name": "CTM_KAS",
          "value": 219,
          "doc": "reserved\n"
        },
        {
          "name": "CTM_DAS",
          "value": 220,
          "doc": "reserved\n"
        },
        {
          "name": "CTM_WAR",
          "value": 221,
          "doc": "Water properties using Haar-Gallagher-Kell (1984) equation of state as implemented in Reaktoro\n"
        },
        {
          "name": "CTM_WWP",
          "value": 222,
          "doc": "Water properties using Wagner and Pruss 1995 (IAWPS95) EOS as implemented in Reaktoro\n"
        },
        {
          "name": "CTM_WZD",
          "value": 223,
          "doc": "Water properties using Zhang and Duan (2005) EOS\n"
        }
      ]
    },
    {
      "name": "MethodCorrP",
      "doc": "Codes for pressure corrections of thermodynamic properties from GEMS\n",
      "members": [
        {
          "name": "CPM_OFF",
          "value": 300,
          "doc": "no account for pressure dependence\n"
        },
        {
          "name": "CPM_NUL",
          "value": 301,
          "doc": "account for pressure dependence is already specified as inherent to a method\n"
        },
        {
          "name": "CPM_ONE",
          "value": 302
        },
        {
          "name": "CPM_TWO",
          "value": 303
        },
        {
          "name": "CPM_TRI",
          "value": 304
        },
        {
          "name": "CPM_CON",
          "value": 305,
          "doc": "molar volume of DC or dVr are assumed independent of P and T\n"
        },
        {
          "name": "CPM_VKE",
          "value": 306,
          "doc": "molar volume from empirical V=f(T,P) equation (Dorogokupets et al., 1988)\n"
        },
        {
          "name": "CPM_VBE",
          "value": 307,
          "doc": "molar volume from empirical  V=f(T,P) equation (Berman, 1988)\n"
        },
        {
          "name": "CPM_VBM",
          "value": 308,
          "doc": "molar volume from Birch-Murnaghan EoS (Gottschalk, 1997)\n"
        },
        {
          "name": "CPM_CEH",
          "value": 309,
          "doc": "molar volume V(T,P) from Murnaghan EoS (Holland and Powell, 1998)\n"
        },
        {
          "name": "CPM_VTA",
          "value": 310,
          "doc": "molar volume V(T,P) from Tait EoS (Holland and Powell, 2011)\n"
        },
        {
          "name": "CPM_GAS",
          "value": 311,
          "doc": "calculation of fugacities of gases from their critical parameters (reserved)\n"
        },
        {
          "name": "CPM_PRSV",
          "value": 312,
          "doc": "Peng-Robinson-Stryjek-Vera (PRSV) EoS for fluids (nonelectrolytes)\n"
        },
        {
          "name": "CPM_EMP",
          "value": 313,
          "doc": "Churakov-Gottschalk (CG) EoS for fluids (nonelectrolytes)\n"
        },
        {
          "name": "CPM_SRK",
          "value": 314,
          "doc": "Soave-Redlich-Kwong (SRK) EoS for fluids (nonelectrolytes)\n"
        },
        {
          "name": "CPM_STP",
          "value": 315,
          "doc": "Sterner-Pitzer (SP) EoS for fluids (nonelectrolytes) (reserved)\n"
        },
        {
          "name": "CPM_PR78",
          "value": 316,
          "doc": "Peng-Robinson (PR78) EoS for fluids (nonelectrolytes)\n"
        },
        {
          "name": "CPM_CORK",
          "value": 317,
          "doc": "Compensated Redlich-Kwong (CORK) EoS for fluids (nonelectrolytes)\n"
        },
        {
          "name": "CPM_REFL",
          "value": 318,
          "doc": "reference EoS model for fluids (nonelectrolytes) (reserved)\n"
        },
        {
          "name": "CPM_HKF",
          "value": 319,
          "doc": "account for pressure up to 5 kbar by HKF (Tanger and Helgeson, 1988)\n"
        },
        {
          "name": "CPM_AKI",
          "value": 320,
          "doc": "partial molal volumes of aqueous nonelectrolyte species (Akinfiev and Diamond, 2003)\n"
        },
        {
          "name": "CPM_PCR",
          "value": 321,
          "doc": "PARCOR estimation of HKF EoS parameters\n"
        },
        {
          "name": "CPM_INK",
          "value": 322,
          "doc": "Lagrange polynomial interpolation over logK(TP) array; ReacDC\n"
        }
      ]
    }
  ],
  "typedefs": [
    {
      "name": "Substances",
      "typeId": "list",
      "type": {
        "typeId": "list",
        "elemTypeId": "struct",
        "elemType": {
          "typeId": "struct",
          "class": "Substance"
        }
      },
      "doc": "Definition of Substance list (substances array) type\n"
    }
  ],
  "structs": [
    {
      "name": "Substance",
      "doc": "Description of a substance (chemical species, chemical component, site moiety)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "symbol",
          "typeId": "string",
          "doc": "Unique name\/ID of this substance (e.g. abbreviated mineral name)\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "sourcetdb",
          "typeId": "i32",
          "doc": "Source TDB: enum validated with class SourceTDB\n",
          "class": "SourceTDB",
          "required": "required"
        },
        {
          "key": 3,
          "name": "formula",
          "typeId": "string",
          "doc": "Formula of substance in GEMS syntax, in elements, can include moiety symbols\n",
          "required": "required"
        },
        {
          "key": 5,
          "name": "name",
          "typeId": "string",
          "doc": "Name of the substance (chemical or mineral nomenclature)\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "class_",
          "typeId": "i32",
          "doc": "Class of substance: enum validated with class SubstanceClass\n",
          "class": "SubstanceClass",
          "required": "req_out"
        },
        {
          "key": 8,
          "name": "aggregate_state",
          "typeId": "i32",
          "doc": "(Standard) state of this substance: enum validated with class AggregateState\n",
          "class": "AggregateState",
          "required": "req_out"
        },
        {
          "key": 9,
          "name": "standard_cscale",
          "typeId": "i32",
          "doc": "(Standard) concentration scale: enum validated with class ConcentrationScales\n",
          "class": "ConcentrationScales",
          "required": "req_out"
        },
        {
          "key": 10,
          "name": "Tst",
          "typeId": "double",
          "doc": "Reference temperature for standard state (usually 298.15 K)\n",
          "required": "req_out",
          "default": 298.15
        },
        {
          "key": 11,
          "name": "Pst",
          "typeId": "double",
          "doc": "Reference pressure (usually 1 bar or 10^5 Pa, sometimes 1.013 bar = 1 atm)\n",
          "required": "req_out",
          "default": 100000
        },
        {
          "key": 12,
          "name": "formula_charge",
          "typeId": "double",
          "doc": "Formula charge, default 0 (usually calculated from parsed formula)\n",
          "required": "req_out"
        },
        {
          "key": 13,
          "name": "mass_per_mole",
          "typeId": "double",
          "doc": "Mass per 1 mole of this substance \"mM\" kg\/mol (calculated with fCharge)\n",
          "required": "req_out"
        },
        {
          "key": 14,
          "name": "s_density",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard-state density at Tst, Pst  \"d0\"  kg\/m3\n",
          "required": "req_out",
          "default": {
            "name": "sDens"
          }
        },
        {
          "key": 15,
          "name": "sm_volume",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard volume at Tst, Pst \"V0\" m3\/mol\n",
          "required": "req_out",
          "default": {
            "name": "sV0"
          }
        },
        {
          "key": 16,
          "name": "sm_gibbs_energy",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard Gibbs energy at Tst, Pst  \"GO\" J\/mol\n",
          "required": "req_out",
          "default": {
            "name": "sG0"
          }
        },
        {
          "key": 17,
          "name": "sm_enthalpy",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard enthalpy at Tst, Pst  \"H0\" J\/mol\n",
          "required": "req_out",
          "default": {
            "name": "sH0"
          }
        },
        {
          "key": 18,
          "name": "sm_entropy_f",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard entropy of formation from elements at st.states \"S0f\" J\/K\/mol\n",
          "required": "req_out",
          "default": {
            "name": "sSf"
          }
        },
        {
          "key": 19,
          "name": "sm_entropy_abs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard absolute entropy at Tst, Pst \"S0\" J\/K\/mol\n",
          "required": "req_out",
          "default": {
            "name": "sS0"
          }
        },
        {
          "key": 20,
          "name": "sm_heat_capacity_p",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard constant-pressure heat capacity at Tst, Pst \"Cp0\" J\/K\/mol\n",
          "required": "req_out",
          "default": {
            "name": "sCp0"
          }
        },
        {
          "key": 21,
          "name": "m_compressibility",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Isothermal compressibility (for condensed substances)\n",
          "required": "req_out",
          "default": {
            "name": "betaT"
          }
        },
        {
          "key": 22,
          "name": "m_expansivity",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Isobaric expansivity (for condensed substances)\n",
          "required": "req_out",
          "default": {
            "name": "alphaP"
          }
        },
        {
          "key": 23,
          "name": "method_genEoS",
          "typeId": "i32",
          "doc": "General method (or equation of state for both T and P correction), validate with class MethodGenEoS\n",
          "class": "MethodGenEoS",
          "required": "req_out"
        },
        {
          "key": 24,
          "name": "method_corrT",
          "typeId": "i32",
          "doc": "Method of temperature correction of thermodynamic properties, validate with class MethodCorrT\n",
          "class": "MethodCorrT",
          "required": "req_out"
        },
        {
          "key": 25,
          "name": "method_corrP",
          "typeId": "i32",
          "doc": "Method of pressure correction of thermodynamic properties validate with class MethodCorrP\n",
          "class": "MethodCorrP",
          "required": "req_out"
        },
        {
          "key": 26,
          "name": "limitsTP",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "double"
          },
          "doc": "Lower and upper T, P limits for T,P corrections\n",
          "required": "req_out",
          "default": {
            "lowerT": 273.15,
            "upperT": 298.15,
            "lowerP": 1,
            "upperP": 1000000
          }
        },
        {
          "key": 27,
          "name": "m_heat_capacity_p_t_coeffs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Coefficients of Cp0(T) function per mole \"CpTc\"\n",
          "required": "optional",
          "default": {
            "name": "CpTc"
          }
        },
        {
          "key": 28,
          "name": "m_volume_pt_coeffs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Coefficients of V0(T,P) function per mole \"VpTc\"\n",
          "required": "optional",
          "default": {
            "name": "VpTc"
          }
        },
        {
          "key": 29,
          "name": "eos_hkf_coeffs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Coefficients of HKF EoS    \"HKFc\"\n",
          "required": "optional",
          "default": {
            "name": "HKFc"
          }
        },
        {
          "key": 30,
          "name": "eos_ad_coeffs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Coefficients of Akinfiev-Diamond EoS \"ADmc\"\n",
          "required": "optional",
          "default": {
            "name": "ADmc"
          }
        },
        {
          "key": 31,
          "name": "eos_bm_coeffs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Coefficients of Birch-Murnaghan EoS \"BMmc\"\n",
          "required": "optional",
          "default": {
            "name": "BMmc"
          }
        },
        {
          "key": 32,
          "name": "eos_cg_coeffs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Churakov-Gottschalk EoS coefficients (max. 13) \"CGmc\"\n",
          "required": "optional",
          "default": {
            "name": "Empmc"
          }
        },
        {
          "key": 33,
          "name": "eos_gas_crit_props",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Critical properties for gas\/fluid CST EoS \"gcrp\"\n",
          "required": "optional",
          "default": {
            "name": "gcrp"
          }
        },
        {
          "key": 34,
          "name": "m_phase_trans_props",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Properties of phase transitions for minerals (Berman) Tr; Tft; tilt; l1,l2 \"Phtrp\"\n",
          "required": "optional",
          "default": {
            "name": "Phtrp"
          }
        },
        {
          "key": 35,
          "name": "m_lambda_trans_props",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Properties of lambda transition for minerals Smax, Tlt \"Lamtrp\"\n",
          "required": "optional",
          "default": {
            "name": "Lamtrp"
          }
        },
        {
          "key": 36,
          "name": "m_gibbs_energy_polynom",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Polynomial coefficients for G0(T) in Calphad format (compatible with Maier-Kelly)\n",
          "required": "optional",
          "default": {
            "name": "G0Tc"
          }
        },
        {
          "key": 37,
          "name": "g0_pt_values",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.PropertiesPTArray"
          },
          "doc": "Interpolation array for G0(P,T) values\n",
          "required": "optional",
          "default": {
            "name": "G0pT"
          }
        },
        {
          "key": 38,
          "name": "surface_density",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Standard surface density and denticity (for surface species) \"surfd\"\n",
          "required": "optional",
          "default": {
            "name": "surfd"
          }
        },
        {
          "key": 39,
          "name": "aq_edh_props",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Individual properties for Debye-Hueckel-type aqueous activity \"EDHp\"\n",
          "required": "optional",
          "default": {
            "name": "EDHp"
          }
        },
        {
          "key": 40,
          "name": "comment",
          "typeId": "string",
          "doc": "Comment - e.g. who entered\/modified, ...\n",
          "required": "optional",
          "default": "comment (substance)"
        },
        {
          "key": 41,
          "name": "datasources",
          "typeId": "set",
          "type": {
            "typeId": "set",
            "elemTypeId": "string"
          },
          "doc": "Labels of datasource DB objects\n",
          "required": "optional"
        },
        {
          "key": 42,
          "name": "time_stamp",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.TimeStamp"
          },
          "doc": "Timestamp when the record was created or modified\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "SubstanceInfo",
      "doc": "Short description of substance (for using in ChemSysDef etc.)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "symbol",
          "typeId": "string",
          "doc": "Unique name\/ID of this substance (e.g. abbreviated mineral name)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "formula",
          "typeId": "string",
          "doc": "Formula of substance in GEMS syntax, in elements, can include moiety symbols\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "class_",
          "typeId": "i32",
          "doc": "Class of substance: enum validated with class SubstanceClass\n",
          "class": "SubstanceClass",           
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "aggregate_state",
          "typeId": "i32",
          "doc": "(Standard) state of this substance: enum validated with class AggregateState\n",
          "class": "AggregateState", 
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "standard_cscale",
          "typeId": "i32",
          "doc": "(Standard) concentration scale: enum validated with class ConcentrationScales\n",
          "class": "ConcentrationScales", 
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "formula_charge",
          "typeId": "double",
          "doc": "Formula charge, default 0 (usually calculated from parsed formula)\n",
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "mass_per_mole",
          "typeId": "double",
          "doc": "Mass per 1 mole of this substance \"mM\" kg\/mol (calculated with fCharge)\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "ElementData",
      "doc": "Data structure for processing the elements\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "elemc",
          "typeId": "i32",
          "doc": "Class (type) of this element (independent component)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "Mar",
          "typeId": "double",
          "doc": "Relative atomic mass of this element, dimensionless\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "iMass",
          "typeId": "i16",
          "doc": "Isotope mass or 0 if natural mixture of isotopes\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "iNA",
          "typeId": "double",
          "doc": "Isotope abundance fraction, default 1\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "S0a",
          "typeId": "double",
          "doc": "Standard abs entropy J\/K\/mol per mole of atoms\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "V0a",
          "typeId": "double",
          "doc": "Standard volume cm3 per mole of atoms\n",
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "Cp0a",
          "typeId": "double",
          "doc": "Standard heat capacity J\/K\/mol per mole of atoms\n",
          "required": "req_out"
        },
        {
          "key": 8,
          "name": "valences",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "double"
          },
          "doc": "Valences possible for this element\n",
          "required": "req_out"
        },
        {
          "key": 11,
          "name": "processed",
          "typeId": "bool",
          "doc": "indicator of processing the data\n",
          "required": "req_out",
          "default": 0
        },
        {
          "key": 12,
          "name": "elemid",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 13,
          "name": "symbol",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 14,
          "name": "formula",
          "typeId": "string",
          "required": "optional"
        }
      ]
    },
    {
      "name": "SubstanceData",
      "doc": "Work structure keeping the data for substance data object calculations\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "Nelem",
          "typeId": "i16",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "elems",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "ElementData"
            }
          },
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "cmV0",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "cmG0",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "cmH0",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "cmS0",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 8,
          "name": "cmCp0",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 9,
          "name": "cfCharge",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 10,
          "name": "cmMass",
          "typeId": "double",
          "required": "req_out"
        },
        {
          "key": 11,
          "name": "processed",
          "typeId": "bool",
          "required": "req_out",
          "default": 0
        },
        {
          "key": 12,
          "name": "subsid",
          "typeId": "i32",
          "required": "optional"
        },
        {
          "key": 13,
          "name": "symbol",
          "typeId": "string",
          "required": "optional"
        },
        {
          "key": 14,
          "name": "formula",
          "typeId": "string",
          "required": "optional"
        }
      ]
    },
    {
      "name": "ThermoPropertiesSubstance",
      "doc": "Structure keeping the thermodynamic properites which can be calculated for a substance\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "gibbs_energy",
          "typeId": "double",
          "doc": "The apparent standard molar Gibbs free energy of the species\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "helmholtz_energy",
          "typeId": "double",
          "doc": "The apparent standard molar Helmholtz free energy of the species\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "internal_energy",
          "typeId": "double",
          "doc": "The apparent standard molar internal energy of the species\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "enthalpy",
          "typeId": "double",
          "doc": "The apparent standard molar enthalpy of the species\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "entropy",
          "typeId": "double",
          "doc": "The standard molar entropy of the species\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "volume",
          "typeId": "double",
          "doc": "The standard molar volume of the species\n",
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "heat_capacity_cp",
          "typeId": "double",
          "doc": "The standard molar isobaric heat capacity of the species\n",
          "required": "req_out"
        },
        {
          "key": 8,
          "name": "heat_capacity_cv",
          "typeId": "double",
          "doc": "The standard molar isochoric heat capacity of the species\n",
          "required": "req_out"
        }
      ]
    }
  ],
  "constants": [
  ],
  "services": [
  ]
}
