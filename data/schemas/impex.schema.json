{
  "name": "impex",
  "doc": "Apache Thrift IDL definition for text import-export interfaces\n",
  "namespaces": {
    "*": "impex"
  },
  "includes": [
  ],
  "enums": [
  ],
  "typedefs": [
  ],
  "structs": [
    {
      "name": "FormatValue",
      "doc": "Definition of the data value format in imported\/exported file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "format",
          "typeId": "string",
          "doc": "Format scanf\/printf (to string first): \"%s\" | \"in\" | \"out\" | \"endl\" | \"txel\" | \"txkw\"; \"in\" | \"out\" | \"endl\" for stream input\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "factor",
          "typeId": "double",
          "doc": "Factor != 0, default 1; Each num.value is multiplied (import) or divided (export) by factor\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "increment",
          "typeId": "double",
          "doc": "Increment, default 0; added to each numerical value (import) or subtracted from (export)\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatKeyword",
      "doc": "Format to read\/print keywords in key-value pair file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "format",
          "typeId": "string",
          "doc": "scanf\/printf format for keyword\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "delim_begin",
          "typeId": "string",
          "doc": "delimiter for keyword begin e.g. \"\\\"\" | \"<\" | \"\"\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "delim_end",
          "typeId": "string",
          "doc": "delimiter for keyword end e.g. \"\\\"\" | \">\" | \"\"\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "DataType",
      "doc": "Type of object from the imported or exported file (for use in keyword lookup list or map)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "datatype",
          "typeId": "string",
          "doc": "Basis type \"string\" | \"float\" | \"double\" | \"i16\" | \"i32\" | \"bool\" | ...\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "organization",
          "typeId": "string",
          "doc": "Organization: \"\" | \"list\" | \"set\" | \"map\" | \"embedded\" | ...\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "DataObject",
      "doc": "Thrift key of data object \"8\" or \"3.8\" or \"2.3.8\" or \"\" to ignore (import); any string not starting from a digit as comment (export)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "field",
          "typeId": "string",
          "doc": "Either Thrift key or name of the data field in recursive form (s e.g. \"4.3.1\" or name1.name2 )\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "ignore",
          "typeId": "bool",
          "doc": "Set to true if the corresponding value in file has to be ignored (default: false)\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "script",
          "typeId": "string",
          "doc": "Default \"\" or contains ECMA function script for operation on data values in block TBD\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "convert",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Default empty or contains pair(s) read_value : saved_value e.g. \"e\": \"4\" (usually for setting enum values)\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "Separators",
      "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "v_sep",
          "typeId": "string",
          "doc": "Value separator (for arrays) \" \" | \",\" | \"\\t\" | \"integer\" (=fixed field width)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "l_sep",
          "typeId": "string",
          "doc": "Line separator \"\\n\" ...\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "r_sep",
          "typeId": "string",
          "doc": "Row separator (table), \"\\n\" ...\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "c_head",
          "typeId": "string",
          "doc": "Head comment separator  e.g. \"#\" or '%'\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "c_end",
          "typeId": "string",
          "doc": "End comment separator e.g. \"\\n\"\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "eod",
          "typeId": "string",
          "doc": "string indicating end of data (as list of blocks) in file or \"\" as default ']' (end of file)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "encoding",
          "typeId": "string",
          "doc": "encoding (\"\" for standard system encoding)\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "str_delim",
          "typeId": "string",
          "doc": "Delimiter for strings - default \"\\\"\"\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "bod",
          "typeId": "string",
          "doc": "string indicating begin of data (as list of blocks) in file or \"\" as default '['\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatBlock",
      "doc": "Text block format in file corresponding to one database document (record)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "defaults",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Default Key, Value pairs to DOM\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "pairs",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataType"
            }
          },
          "doc": "Lookup map of keyword-value pair format\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "matches",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": ">=1 keywd, DataObject pairs connecting the block of data in file with DOM\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "script",
          "typeId": "string",
          "doc": "Default \"\" or contains ECMA function script for operation on data values in block TBD\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatTextFile",
      "doc": "Definition of text data file format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format definition for one or more blocks for data records - default 1 block\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "lines",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "doc": "Will be format lines list\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "separs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "file_name",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data block in file >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "number of text lines in file (>=1), 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nchars",
          "typeId": "i32",
          "doc": "total number of characters in file, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatKeyValue",
      "doc": "Definition of key-value input format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "head_regexp",
          "typeId": "string",
          "doc": "Regular Expression for head of block\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "end_regexp",
          "typeId": "string",
          "doc": "Regular Expression for end of block\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "key_regexp",
          "typeId": "string",
          "doc": "Regular Expression for keyword\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "value_regexp",
          "typeId": "string",
          "doc": "Regular Expression for data value(s)\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "value_next",
          "typeId": "string",
          "doc": "Key-Value pair end delimiter (used if empty value_regexp )\n",
          "required": "req_out",
          "default": "\n"
        },
        {
          "key": 6,
          "name": "value_token_regexp",
          "typeId": "string",
          "doc": "Regular Expression to iterate over matches  (used to convert value to string list)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "comment_regexp",
          "typeId": "string",
          "doc": "Regular Expression for skip comments\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Ndata",
          "typeId": "i32",
          "doc": "number of data items per block (0 if not set)\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatKeyValueFile",
      "doc": "Definition of text file with key-value pair data\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "format",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatKeyValue"
          },
          "doc": "Definition of key-value block in file\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "renderer",
          "typeId": "string",
          "doc": "Rendering syntax for the foreign key-value file \"GEMS3K\" | \"BIB\" | \"RIS\" | ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 5,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data blocks (records) >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatTableHeaderRow",
      "doc": "Definition of header row values\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "h_row",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "doc": "Format,Value pairs for value(s) - number of map elements as Ncols\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "FormatTableHeader",
      "doc": "Definition of format of the table header - can have one or more rows\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "h_rows",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "FormatTableHeaderRow"
            }
          },
          "doc": "One or more header rows forming the header\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "match",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "i32",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": "Mapping of header column index to internal thrift data objects in DOM\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "Nhcols",
          "typeId": "i32",
          "doc": "Number of header columns\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "Nhrows",
          "typeId": "i32",
          "doc": "Number of header rows\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "FormatTableRow",
      "doc": "Definition of format of the table data row (treated as data block\/record)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "data_row",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": "Mapping of column data. See also FormatTableHeader (to avoid duplication)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "Ndcols",
          "typeId": "i32",
          "doc": "Number of data columns in the row\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "func_script",
          "typeId": "string",
          "doc": "Default \"\" or contains ECMA function script for operation on data values in block TBD\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatTableFile",
      "doc": "Definition of table text file format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "header",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTableHeader"
          },
          "doc": "Table header defining order of data in columns\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "datarow",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTableRow"
          },
          "doc": "Table row format for reading\/writing the data body of the table\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "file_name",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Ndrows",
          "typeId": "i32",
          "doc": "Number of rows in the table data >=1; 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatStructDataFile",
      "doc": "Definition of foreign structured data JSON\/YAML\/XML text file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "renderer",
          "typeId": "string",
          "doc": "Rendering syntax for the foreign file \"JSON\" | \"YAML\" | \"XML\" | ...\n",
          "required": "required",
          "default": "JSON"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "comment",
          "typeId": "string",
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data blocks (records) >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatImportExportFile",
      "doc": "Generalized import-export data file format\n",
      "isException": false,
      "isUnion": true,
      "fields": [
        {
          "key": 1,
          "name": "ff_text",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTextFile"
          },
          "doc": "Definition of text data file format\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "ff_table",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTableFile"
          },
          "doc": "Definition of data table file format\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "ff_keyvalue",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatKeyValueFile"
          },
          "doc": "Definition of file format with key-value pair data\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "ff_stdata",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatStructDataFile"
          },
          "doc": "Definition of foreign structured data JSON\/YAML\/XML file format\n",
          "required": "req_out"
        }
      ]
    }
  ],
  "constants": [
  ],
  "services": [
  ]
}
