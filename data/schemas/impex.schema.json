{
  "name": "impex",
  "doc": "Apache Thrift IDL definition for text import-export interfaces\n",
  "namespaces": {
    "*": "impex"
  },
  "includes": [
  ],
  "enums": [
    {
      "name": "DirectionType",
      "doc": "Classes of direction types\n",
      "members": [
        {
          "name": "IMPORT",
          "value": 0,
          "doc": "import\n"
        },
        {
          "name": "EXPORT",
          "value": 1,
          "doc": "export\n"
        }
      ]
    }
  ],
  "typedefs": [
  ],
  "structs": [
    {
      "name": "FormatValue",
      "doc": "Definition of the data value format in imported\/exported file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "format",
          "typeId": "string",
          "doc": "Format scanf\/printf (to string first): \"%s\" | \"in\" | \"out\" | \"endl\" | \"txel\" | \"txkw\"; \"in\" | \"out\" | \"endl\" for stream input\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "factor",
          "typeId": "double",
          "doc": "Factor != 0, default 1; Each num.value is multiplied (import) or divided (export) by factor\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "increment",
          "typeId": "double",
          "doc": "Increment, default 0; added to each numerical value (import) or subtracted from (export)\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatKeyword",
      "doc": "Format to read\/print keywords in key-value pair file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "format",
          "typeId": "string",
          "doc": "scanf\/printf format for keyword\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "delim_begin",
          "typeId": "string",
          "doc": "delimiter for keyword begin e.g. \"\\\"\" | \"<\" | \"\"\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "delim_end",
          "typeId": "string",
          "doc": "delimiter for keyword end e.g. \"\\\"\" | \">\" | \"\"\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "DataType",
      "doc": "Type of object from the imported or exported file (for use in keyword lookup list or map)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "datatype",
          "typeId": "string",
          "doc": "Basis type \"string\" | \"float\" | \"double\" | \"i16\" | \"i32\" | \"bool\" | ...\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "organization",
          "typeId": "string",
          "doc": "Organization: \"\" | \"list\" | \"set\" | \"map\" | \"group\" | \"embedded\" | ...\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "DataObject",
      "doc": "Thrift key of data object \"8\" or \"3.8\" or \"2.3.8\" or \"\" to ignore (import); any string not starting from a digit as comment (export)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "field",
          "typeId": "string",
          "doc": "Either Thrift key or name of the data field in recursive form (s e.g. \"4.3.1\" or name1.name2 )\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "ignore",
          "typeId": "bool",
          "doc": "Set to true if the corresponding value in file has to be ignored (default: false)\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "script",
          "typeId": "string",
          "doc": "Default \"\" or contains lua script for operation on data values in block\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "convert",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Default empty or contains pair(s) read_value : saved_value e.g. \"e\": \"4\" (usually for setting enum values)\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "Separators",
      "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "v_sep",
          "typeId": "string",
          "doc": "Value separator (for arrays) \" \" | \",\" | \"\\t\" | \"integer\" (=fixed field width)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "l_sep",
          "typeId": "string",
          "doc": "Line separator \"\\n\" ...\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "r_sep",
          "typeId": "string",
          "doc": "Row separator (table), \"\\n\" ...\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "c_head",
          "typeId": "string",
          "doc": "Head comment separator  e.g. \"#\" or '%'\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "c_end",
          "typeId": "string",
          "doc": "End comment separator e.g. \"\\n\"\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "eod",
          "typeId": "string",
          "doc": "string indicating end of data (as list of blocks) in file or \"\" as default ']' (end of file)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "encoding",
          "typeId": "string",
          "doc": "encoding (\"\" for standard system encoding)\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "str_delim",
          "typeId": "string",
          "doc": "Delimiter for strings - default \"\\\"\"\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "bod",
          "typeId": "string",
          "doc": "string indicating begin of data (as list of blocks) in file or \"\" as default '['\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatBlock",
      "doc": "Text block format in file corresponding to one database document (record)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "defaults",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Default Key, Value pairs to DOM (import)  or to output (export)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "pairs",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataType"
            }
          },
          "doc": "Lookup map of keyword-value pair format\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "matches",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": ">=1 keywd, DataObject pairs connecting the block of data in file with DOM.\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "script",
          "typeId": "string",
          "doc": "Default \"\" or contains lua script for operation on data values in full DOM\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatTextFile",
      "doc": "Definition of text data file format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format definition for one or more blocks for data records - default 1 block\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "lines",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "doc": "Will be format lines list\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "separs",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "file_name",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data block in file >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "number of text lines in file (>=1), 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nchars",
          "typeId": "i32",
          "doc": "total number of characters in file, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 10,
          "name": "direction",
          "typeId": "i32",
          "doc": "direction\n",
          "class": "DirectionType",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "FormatKeyValue",
      "doc": "Definition of key-value import\/export format\nWe use Regular Expression in case of import and Print Format in case of export.\nUse names \"head0\", ..., \"headN\", \"end0\", ..., \"endN\" to import\/export data from\/to head and end part\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "head_regexp",
          "typeId": "string",
          "doc": "Head of Block:  \"\\\\s*([^\\\\s]+)\\\\s*;\\\\s*(([\\\\w\\\\t \\\\+\\\\-\\\\(\\\\):\\\\.]+)\\\\s*=\\\\s*([^;]+))\" (import)\nor  \"\\n%head0\\n\\t%head1\\n\" (export)\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "end_regexp",
          "typeId": "string",
          "doc": "End of Block: \"([^\\n]+)\" (import)  or  \"%end0\\n\" (export)\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "key_regexp",
          "typeId": "string",
          "doc": "Keyword:  \"\\\\s*;\\\\s*\\\\-{0,1}([a-zA-Z]\\\\w*)\\\\s*\" (import)  or  \"\\t-%key\\t\" (export)\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "value_regexp",
          "typeId": "string",
          "doc": "Data Value(s):  \"\\\\s*([^#\\\\n;]*)\" (import)  or  \"%value\" (export)\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "value_next",
          "typeId": "string",
          "doc": "Key-Value pair end delimiter (used if empty value_regexp or export mode )\n",
          "required": "req_out",
          "default": "\n"
        },
        {
          "key": 6,
          "name": "value_token_regexp",
          "typeId": "string",
          "doc": "Regular Expression to iterate over matches  (used to convert value to string list or if export mode )\n",
          "required": "optional",
          "default": " "
        },
        {
          "key": 7,
          "name": "comment_regexp",
          "typeId": "string",
          "doc": "Regular Expression for skip comments\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Ndata",
          "typeId": "i32",
          "doc": "number of data items per block (0 if not set)\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "strvalue_exp",
          "typeId": "string",
          "doc": "Data String Value(s): only for export  \"\\'%value\\'\"\n",
          "required": "req_out"
        },
        {
          "key": 10,
          "name": "key_order",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "doc": "Keyword order list:  only for export\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatKeyValueFile",
      "doc": "Definition of text file with key-value pair data\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "format",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatKeyValue"
          },
          "doc": "Definition of key-value block in file\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "renderer",
          "typeId": "string",
          "doc": "Rendering syntax for the foreign key-value file \"GEMS3K\" | \"BIB\" | \"RIS\" | ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 5,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data blocks (records) >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 10,
          "name": "direction",
          "typeId": "i32",
          "doc": "direction\n",
          "class": "DirectionType",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "FormatTable",
      "doc": "Definition of of the table input format\nif defined  colsizes, split by sizes\nif defined  value_regexp, split used regexpr\notherwise split by  columns delimiter\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "Nhcols",
          "typeId": "i32",
          "doc": "Number of header columns\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "Nhrows",
          "typeId": "i32",
          "doc": "Number of header rows (start porting from row )\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "headers",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "doc": "Names of header columns\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "rowend",
          "typeId": "string",
          "doc": "Row delimiter\n",
          "required": "req_out",
          "default": "\n"
        },
        {
          "key": 5,
          "name": "colends",
          "typeId": "string",
          "doc": "Columns delimiters\n",
          "required": "req_out",
          "default": "\t "
        },
        {
          "key": 6,
          "name": "usequotes",
          "typeId": "bool",
          "doc": "Quoted field as text\n",
          "required": "req_out",
          "default": 1
        },
        {
          "key": 7,
          "name": "usemore",
          "typeId": "bool",
          "doc": "Can be more than one delimiter between columns\n",
          "required": "req_out",
          "default": 0
        },
        {
          "key": 8,
          "name": "comment_regexp",
          "typeId": "string",
          "doc": "Regular Expression for skip comments\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "colsizes",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "i32"
          },
          "doc": "Fixed size of columns for importing ( apply to all if one item )\n",
          "required": "optional"
        },
        {
          "key": 10,
          "name": "value_regexp",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "doc": "Regular Expression for column value(s) ( apply to all if one item )\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "FormatTableFile",
      "doc": "Definition of table text file format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "format",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTable"
          },
          "doc": "Definition of key-value block in file\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "renderer",
          "typeId": "string",
          "doc": "Rendering syntax for the foreign key-value file \"GEMS3K\" | \"BIB\" | \"RIS\" | ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 5,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data blocks (records) >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 10,
          "name": "direction",
          "typeId": "i32",
          "doc": "direction\n",
          "class": "DirectionType",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "FormatStructDataFile",
      "doc": "Definition of foreign structured data JSON\/YAML\/XML text file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatBlock"
          },
          "doc": "Format for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "renderer",
          "typeId": "string",
          "doc": "Rendering syntax for the foreign file \"JSON\" | \"YAML\" | \"XML\" | ...\n",
          "required": "required",
          "default": "JSON"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "comment",
          "typeId": "string",
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data blocks (records) >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 10,
          "name": "direction",
          "typeId": "i32",
          "doc": "direction\n",
          "class": "DirectionType",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "FormatImportExportFile",
      "doc": "Generalized import-export data file format\n",
      "isException": false,
      "isUnion": true,
      "fields": [
        {
          "key": 1,
          "name": "ff_text",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTextFile"
          },
          "doc": "Definition of text data file format\n",
          "required": "optional"
        },
        {
          "key": 2,
          "name": "ff_table",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatTableFile"
          },
          "doc": "Definition of data table file format\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "ff_keyvalue",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatKeyValueFile"
          },
          "doc": "Definition of file format with key-value pair data\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "ff_stdata",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "FormatStructDataFile"
          },
          "doc": "Definition of foreign structured data JSON\/YAML\/XML file format\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "ImpexFormat",
      "doc": "description of import\/export format record\n",
      "isException": false,
      "to_select": [ "4", "5", "6", "7" ],
      "to_key": [ "4" ],
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "_id",
          "typeId": "string",
          "doc": "Handle (id) of this record or 0 if unknown\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "_key",
          "typeId": "string",
          "doc": "ID of this record within the impex collection (part of _id)\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "_rev",
          "typeId": "string",
          "doc": "Code of revision (changed by the system at every update)\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "name",
          "typeId": "string",
          "doc": "short description\/keywd (used as key field)\n",
          "required": "required"
        },
        {
          "key": 5,
          "name": "impexschema",
          "typeId": "string",
          "doc": "impex schema\n",
          "required": "required"
        },
        {
          "key": 6,
          "name": "schema",
          "typeId": "string",
          "doc": "record schema\n",
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "comment",
          "typeId": "string",
          "doc": "description of record\n",
          "required": "req_out"
        },
        {
          "key": 8,
          "name": "direction",
          "typeId": "i32",
          "doc": "direction\n",
          "class": "DirectionType",
          "required": "req_out"
        },
        {
          "key": 9,
          "name": "impex",
          "typeId": "string",
          "doc": "format structure\n",
          "required": "required"
        },
        {
          "key": 10,
          "name": "format",
          "typeId": "string",
          "doc": "Id\/description of foreign file format\n",
          "required": "optional"
        },
        {
          "key": 11,
          "name": "extension",
          "typeId": "string",
          "doc": "file extension\n",
          "required": "optional"
        }
      ]
    }
  ],
  "constants": [
  ],
  "services": [
  ]
}
