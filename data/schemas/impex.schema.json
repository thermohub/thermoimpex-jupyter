{
  "name": "impex",
  "doc": "Apache Thrift IDL definition for text import-export interfaces\n",
  "namespaces": {
    "*": "impex"
  },
  "includes": [
  ],
  "enums": [
  ],
  "typedefs": [
    {
      "name": "Format",
      "typeId": "string",
      "doc": "Format string in scanf\/printf syntax \"%s\" | \"in\" | \"out\" | \"endl\" | \"txel\" | \"txkw\"\n"
    },
    {
      "name": "Value",
      "typeId": "string",
      "doc": "Intermediate value to be read from file (import) or to be printed to file (export)\n"
    }
  ],
  "structs": [
    {
      "name": "DataValue",
      "doc": "Definition of the data value\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "value",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Format, Value pair (formats: \"%s\" | \"in\" | \"out\" | \"endl\" | \"txel\" | \"txkw\" )\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "factor",
          "typeId": "double",
          "doc": "Factor != 0, default 1; Each num.value is multiplied (import) or divided (export) by factor\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "increment",
          "typeId": "double",
          "doc": "Increment, default 0; added to each numerical value (import) or subtracted from (export)\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "fscript",
          "typeId": "string",
          "doc": "Default \"\" or contains ECMA function script for operation on data value TBD\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "DataObject",
      "doc": "Thrift key of data object \"8\" or \"3.8\" or \"2.3.8\" or \"\" to ignore (import); any string not starting from a digit as comment (export)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "fieldkey",
          "typeId": "string",
          "doc": "Thrift key of data object \"8\" or \"3.8\" or \"2.3.8\" or \"\" to ignore (import)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "thriftkey",
          "typeId": "string",
          "doc": "String keyword of data object (any string not starting from a digit as comment (export)\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "Separators",
      "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "v_sep",
          "typeId": "string",
          "doc": "Value separator (for arrays) \" \" | \",\" | \"\\t\" | \"integer\" (=fixed field width)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "l_sep",
          "typeId": "string",
          "doc": "Line separator \"\\n\" ...\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "r_sep",
          "typeId": "string",
          "doc": "Row separator (table), \"\\n\" ...\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "c_head",
          "typeId": "string",
          "doc": "Head comment separator  e.g. \"#\" or '%'\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "c_end",
          "typeId": "string",
          "doc": "End comment separator e.g. \"\\n\"\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "eod",
          "typeId": "string",
          "doc": "string indicating end of data in file or \"\" as default (end of file)\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "encoding",
          "typeId": "string",
          "doc": "encoding (\"\" for standard system encoding)\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "str_delim",
          "typeId": "string",
          "doc": "Delimiter for strings - default \"\\\"\"\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "TextBlockFormat",
      "doc": "Text block format in file corresponding to one database document (record)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "struct",
            "valueTypeId": "struct",
            "keyType": {
              "typeId": "struct",
              "class": "DataValue"
            },
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": "One or more DataValue,DataObject pairs\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "b_head",
          "typeId": "string",
          "doc": "Head block separator - any characteristic string e.g. \"{\" or just \"\\n\"\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "b_end",
          "typeId": "string",
          "doc": "End block separator - any characteristic string e.g. \"}\" or \"\\n\"\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "Ndata",
          "typeId": "i32",
          "doc": "number of data items per block\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "TextFileFormat",
      "doc": "Definition of text data file format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "blocks",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "TextBlockFormat"
            }
          },
          "doc": "Format definition for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data block in file >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "number of text lines in file (>=1), 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nchars",
          "typeId": "i32",
          "doc": "total number of characters in file, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "TableHeaderRow",
      "doc": "Definition of header row values\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "value",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Format,Value pairs for value(s) - number of map elements as Ncols\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "TableHeaderFormat",
      "doc": "Definition of table header - can have one or more rows\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "col_headers",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "TableHeaderRow"
            }
          },
          "doc": "One or more header rows forming the header\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "col_keys",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "i32",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": "Mapping of header column index to internal thrift data object keywords\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "TableFileFormat",
      "doc": "Definition of table text file format\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "header",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "TableHeaderFormat"
          },
          "doc": "Table header\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "row",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "struct",
            "valueTypeId": "struct",
            "keyType": {
              "typeId": "struct",
              "class": "DataValue"
            },
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": "Mapping of column data forming a table row. See also TableHeaderFormat (to avoid duplication)\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Ncols",
          "typeId": "i32",
          "doc": "Number of colums in the table >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nhrows",
          "typeId": "i32",
          "doc": "Number of rows in the table header 1 or more, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Ndrows",
          "typeId": "i32",
          "doc": "Number of rows in the table data >=1, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "Keyword",
      "doc": "Keyword in key-value pair\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "key_long",
          "typeId": "string",
          "doc": "Keyword (long)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "key_short",
          "typeId": "string",
          "doc": "Keyword (short)\n",
          "required": "optional"
        },
        {
          "key": 3,
          "name": "key_delim_begin",
          "typeId": "string",
          "doc": "delimiter for keyword begin e.g. \"\\\"\" | \"<\" | \"\"\n",
          "required": "optional"
        },
        {
          "key": 4,
          "name": "key_delim_end",
          "typeId": "string",
          "doc": "delimiter for keyword end e.g. \"\\\"\" | \">\" | \"\"\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "KeyValuePairFormat",
      "doc": "Definition of key-value pair (line) in file\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "keyword",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "struct",
            "valueType": {
              "typeId": "struct",
              "class": "Keyword"
            }
          },
          "doc": "Format,Data pair for keyword (1 element)\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "value",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "string"
          },
          "doc": "Format,Data pair for value(s) (1 element)\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "kwvs",
          "typeId": "string",
          "doc": "keyword- value separator e.g. \"=\" | \":\" ...\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "factor",
          "typeId": "double",
          "doc": "Factor != 0, default 1; Each num.value is multiplied (import) or divided (export) by factor\n",
          "required": "optional"
        },
        {
          "key": 5,
          "name": "increment",
          "typeId": "double",
          "doc": "Increment, default 0; added to each numerical value (import) or subtracted from (export)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "fscript",
          "typeId": "string",
          "doc": "Default \"\" or contains ECMA function script for operation on data value TBD\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "kvp_delim_end",
          "typeId": "string",
          "doc": "Key-Value pair end delimiter, default \"\\n\" ...\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "KeyValueBlockFormat",
      "doc": "Text block in file corresponding to one database document (record)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "kvpair",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "KeyValuePairFormat"
          },
          "doc": "one keyword-value pair format\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "match",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "struct",
            "valueTypeId": "struct",
            "keyType": {
              "typeId": "struct",
              "class": "Keyword"
            },
            "valueType": {
              "typeId": "struct",
              "class": "DataObject"
            }
          },
          "doc": "mapping of Keywords to (thrift-schema-defined) data fields - many elements to be provided\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "b_head_delim",
          "typeId": "string",
          "doc": "head block delimiter - any characteristic string e.g. \"{\" or just \"\\n\"\n",
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "b_end_delim",
          "typeId": "string",
          "doc": "end block delimiter - any characteristic string e.g. \"}\" or \"\\n\"\n",
          "required": "req_out"
        }
      ]
    },
    {
      "name": "KeyValueFileFormat",
      "doc": "Definition of text file with key-value pair data\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "block",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "KeyValueBlockFormat"
          },
          "doc": "Format for one or more blocks for data records\n",
          "required": "required"
        },
        {
          "key": 3,
          "name": "label",
          "typeId": "string",
          "doc": "Label of data type (vertex type), e.g. \"datasource\", \"element\" ...\n",
          "required": "required"
        },
        {
          "key": 4,
          "name": "separators",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "Separators"
          },
          "doc": "Definition of value, line, row, block, comment, end-of-data separators\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "comment",
          "typeId": "string",
          "doc": "Export: the whole comment text; Import: the comment begin markup string (to skip until endl)\n",
          "required": "optional"
        },
        {
          "key": 6,
          "name": "fname",
          "typeId": "string",
          "doc": "File name or \"console\" for export\n",
          "required": "optional"
        },
        {
          "key": 7,
          "name": "Nkwds",
          "typeId": "i32",
          "doc": "max. number of keywords >= 1 in data block, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 8,
          "name": "Nblocks",
          "typeId": "i32",
          "doc": "number of data blocks (records) >=1, 0 if unknown\n",
          "required": "optional"
        },
        {
          "key": 9,
          "name": "Nlines",
          "typeId": "i32",
          "doc": "total number of text lines in the file, 0 if unknown\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "ImportExportFileFormat",
      "doc": "Generalized import-export data file format\n",
      "isException": false,
      "isUnion": true,
      "fields": [
        {
          "key": 1,
          "name": "ff_text",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "TextFileFormat"
          },
          "doc": "Definition of text data file format\n",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "ff_table",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "TableFileFormat"
          },
          "doc": "Definition of data table file format\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "ff_keyvalue",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "KeyValueFileFormat"
          },
          "doc": "Definition of file format with key-value pair data\n",
          "required": "req_out"
        }
      ]
    }
  ],
  "constants": [
  ],
  "services": [
  ]
}
