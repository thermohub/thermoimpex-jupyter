{
  "name": "ingredient",
  "doc": "Apache Thrift IDL definition for the ingredient service interface\n",
  "namespaces": {
    "*": "ingredient"
  },
  "includes": [
"prop",
"element",
"substance",
"composition"
  ],
  "enums": [
  ],
  "typedefs": [
    {
      "name": "Ingredients",
      "typeId": "list",
      "type": {
        "typeId": "list",
        "elemTypeId": "struct",
        "elemType": {
          "typeId": "struct",
          "class": "Ingredient"
        }
      },
      "doc": "Definition of compositions (composition array) type\n"
    }
  ],
  "structs": [
    {
      "name": "Ingredient",
      "doc": "Description of ingredient = aggregated compositions (e.g. rocks from real minerals)\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "symbol",
          "typeId": "string",
          "doc": "Unique name\/ID of this ingredient e.g. \"clinker\"\n",
          "required": "required"
        },
        {
          "key": 2,
          "name": "name",
          "typeId": "string",
          "doc": "Name of the ingredient (e.g. \"Portland cement clinker\")\n",
          "required": "req_out"
        },
        {
          "key": 3,
          "name": "elements",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "struct",
            "elemType": {
              "typeId": "struct",
              "class": "element.ElementInfo"
            }
          },
          "doc": "List of elements and their masses as basis of this ingredient\n",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "ipco",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "string",
            "valueTypeId": "double"
          },
          "doc": "Ingredient composition in moles of elements (after calculation from compositions) as [ {\"Al\": 0.35}, {\"Ca\": 0.9} ... ]\n",
          "required": "req_out"
        },
        {
          "key": 6,
          "name": "icmMass",
          "typeId": "double",
          "doc": "Mass per 1 mole of this ipco \"mM\" in kg\/mol (calculated using the elements list)\n",
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "icformula",
          "typeId": "string",
          "doc": "Optionally: contents of ipco generated as a single formula string\n",
          "required": "req_out"
        },
        {
          "key": 11,
          "name": "Moles",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "doc": "Input scaling values for various concentration scales, unit of measurement\n",
          "required": "optional",
          "default": {
            "0": 0
          }
        },
        {
          "key": 12,
          "name": "Ptotal",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "100000": 2
          }
        },
        {
          "key": 13,
          "name": "Mwater",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "1": 5
          }
        },
        {
          "key": 14,
          "name": "Vaqtotal",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "0.001": 9
          }
        },
        {
          "key": 15,
          "name": "Mass",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "1": 5
          }
        },
        {
          "key": 16,
          "name": "SurfMoles",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "0.001": 0
          }
        },
        {
          "key": 17,
          "name": "SurfMolal",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "0.001": 3
          }
        },
        {
          "key": 18,
          "name": "SurfArea",
          "typeId": "map",
          "type": {
            "typeId": "map",
            "keyTypeId": "double",
            "valueTypeId": "i32"
          },
          "required": "optional",
          "default": {
            "1": 8
          }
        },
        {
          "key": 21,
          "name": "qformulae",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.CompositionFormulaAmountArray"
          },
          "doc": "Optionally: Input quantities of user-defined formulae to add, can also be formulae of compositions\n",
          "required": "optional"
        },
        {
          "key": 22,
          "name": "iqelements",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.Item"
          },
          "doc": "Optionally: Input amounts of elements to add, values in the same order as in the elements list\n",
          "required": "optional",
          "default": {
            "name": "qe"
          }
        },
        {
          "key": 24,
          "name": "comment",
          "typeId": "string",
          "doc": "Comment e.g. who entered\/modified, ...\n",
          "required": "optional",
          "default": "comment (element)"
        },
        {
          "key": 25,
          "name": "datasources",
          "typeId": "set",
          "type": {
            "typeId": "set",
            "elemTypeId": "string"
          },
          "doc": "Labels of datasource DB objects\n",
          "required": "optional"
        },
        {
          "key": 26,
          "name": "time_stamp",
          "typeId": "struct",
          "type": {
            "typeId": "struct",
            "class": "prop.TimeStamp"
          },
          "doc": "Timestamp\n",
          "required": "optional"
        }
      ]
    },
    {
      "name": "composdata",
      "doc": "Work structure keeping the data to check\/calculate ingredient compositions\n",
      "isException": false,
      "isUnion": false,
      "fields": [
        {
          "key": 1,
          "name": "Nelems",
          "typeId": "i16",
          "required": "req_out"
        },
        {
          "key": 2,
          "name": "elems",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "string"
          },
          "required": "req_out"
        },
        {
          "key": 4,
          "name": "Ncel",
          "typeId": "i16",
          "required": "req_out"
        },
        {
          "key": 5,
          "name": "elams",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "double"
          },
          "required": "req_out"
        },
        {
          "key": 7,
          "name": "Npco",
          "typeId": "i16",
          "required": "req_out"
        },
        {
          "key": 8,
          "name": "pcos",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "double"
          },
          "required": "req_out"
        },
        {
          "key": 10,
          "name": "compos",
          "typeId": "list",
          "type": {
            "typeId": "list",
            "elemTypeId": "double"
          },
          "required": "req_out"
        },
        {
          "key": 11,
          "name": "computed",
          "typeId": "bool",
          "required": "req_out",
          "default": 0
        }
      ]
    }
  ],
  "constants": [
  ],
  "services": [
  ]
}
